---
title: "Learn with Error ..."
jupyter: python3
subtitle: "A public encryption method for post-quantum cryptography"
author:
  - "Li Bai"
author-meta: "Li Bai"
institute:
  - "Temple University, USA"
date: "2023-06-29"
date-format: long
params:
  days:
    label: "Number of Previous Days"
    value: 90
    input: slider
    min: 30
    max: 360
  Msg:
    label: "message"
    value: 1
    input: slider
    min: 0
    max: 1 
  region:
    label: "Regions:"
    value: Europe
    input: select
    choices: [North America, Europe, Asia]
format:
  revealjs:
    theme: [dark, style/custom.scss]
    css: style/metacom_logo.css
    chalkboard: true
    slide-number: true
    preview-links: auto
    pointer:
      color: "#e7298a"
      pointerSize: 24
    include-in-header:
      text: |
        <script src="custom.js"></script>
revealjs-plugins:
  - pointer
  
---
## Cyber Security {background-video="./vids/cyber.mp4" background-video-loop="true" background-opacity="0.4"}

::: incremental
-   Why do we need to develop new encryption
-   Learning with Error
-   How does LWE work
:::
## When will a large-scale quantum computer be built?
:::: {.columns}

::: {.column width="40%"}
![](imgs/quantum.png){.absolute top=200 left=0 width="350" height="300"}
:::
::: {.column width="5%"}
:::
::: {.column width="55%"}
“I estimate a 1/7 chance of breaking RSA-2048 by 2026
and a 1/2 chance by 2031.”

  - Michele Mosca, November 2015 https://eprint.iacr.org/2015/1075
:::

::::

## Learn with Error (LWE)

::: {.panel-tabset}
###  Formulation
You can randomly generate a vector $A$ of random number and a noise vector $n$ with a secret value $s$ to create 
$$
B=As+n
$$

### Code
```{.python}
import random
q= 97      # find a prime number
s=5       # private key
nvals = 10 # generate a vector of ten elements
A=random.sample(range(q), nvals)
B=[]
for x in range(0,len(A)):
   e = random.randint(1,4)
   B.append((A[x]*s+e)%q)
print(">> public keys are: ")   
print(">> A={}".format(A))
print(">> B={}".format(B))
```

### Result

```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
import random
q= 97      # find a prime number
s=5       # private key
nvals = 10 # generate a vector of ten elements
A=random.sample(range(q), nvals)
B=[]
for x in range(0,len(A)):
   e = random.randint(1,4)
   B.append((A[x]*s+e)%q)
print(">> public keys are: ")   
print(">> A={}".format(A))
print(">> B={}".format(B))
```

:::


## Learn with Error (LWE) - Encryption

::: {.panel-tabset}
###  Formulation
Get a message M and derive two variables $u$ and $v$ as follows
```{=tex}
\begin{eqnarray*}
u&=&\left(\sum_{i\in sample}^{} {A_i}\right) \mod q\\
v&=&\left(\sum_{i\in sample}^{}{B_i}\right) +\left\lfloor\frac{q}{2}M\right\rfloor  \mod q
\end{eqnarray*}
```

### Code
Randomly set the message M, and select 1/4 of the samples
```{.python code-line-numbers="3-4"}
import math
u,v=[0,0] 
M=1
sample= random.sample(range(nvals-1), round(nvals/4))
for x in range(0,len(sample)):
   u=u+A[sample[x]]
   v=v+B[sample[x]]
v=v+math.floor(q/2)*M

u=u%q
v=v%q
print(">> u:{}, v:{}".format(u,v))
```

### Result

```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
import math
u,v=[0,0] 
M=1
sample= random.sample(range(nvals-1), round(nvals/4))
for x in range(0,len(sample)):
   u=u+A[sample[x]]
   v=v+B[sample[x]]
v=v+math.floor(q/2)*M
u=u%q
v=v%q
 
print(">> u:{}, v:{}".format(u,v))

```
:::

## Learn with Error (LWE) - Decryption

::: {.panel-tabset}
###  Formulation
The receiver will compute a variable $d$ with received numbers $u$ and $v$ and his/her secret key $s$ as
```{=tex}
\begin{eqnarray*}
d&=& v-su \mod q\\
\bar{m}&=&\begin{cases}
0 & d < q/2\\
1 & d > q/2
\end{cases}
\end{eqnarray*}
```

### Code
```{.python}
print(">> u:{}, v:{}".format(u,v))
print(">> private key s:{}".format(s))
print(">> ....")
print(">> ....")
d=(v-s*u) % q
mbar = 1 if d >q/2 else 0

print(">> m:{}, rec m:{}".format(M,mbar))
```

### Result
```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
print(">> u:{}, v:{}".format(u,v))
print(">> private key s:{}".format(s))
print(">> ....")
print(">> ....")
d=(v-s*u) % q
mbar = 1 if d >q/2 else 0

print(">> m:{}, rec m:{}".format(M,mbar))

```
:::
